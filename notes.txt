Added library Streamlit and Plotly

Ask for stock brokers in Germany to keep after leaving the country -> Staatenlos Mastermind


# Stock Trading Tutorial: https://www.youtube.com/watch?v=SVyuxZqbOrE

Jinja Dropdown rendering
{{ form.model_tickers.label }} {{ form.model_tickers(class = "ui fluid search selection simple dropdown",  multiple = True) }}


Dropdown as a form:
<div class="ui form">
        <div class="field">
            <label>Ticker</label>
            <div class="ui fluid search dropdown">
                <input type="hidden" name="gender">
                <i class="dropdown icon"></i>
                <div class="default text">Gender</div>
                <div class="menu">
                    {% for ticker in tickers %}
                        <div class="item" data-value="{{ ticker }}">{{ ticker }}</div>
                        <div class="item" data-value="{{ ticker }}">{{ ticker }}</div>
                    {% endfor %}
                </div>
            </div>
        </div>
      </div>


# # Uploading files
# import os
# from werkzeug.utils import secure_filename
# folder = "/home/martin/IT/git/udacity-investment-and-trading-capstone-project/upload"
# extensions = set(['txt', 'jgp', 'png'])
# def allowed(filename):
#     # Check if a dot is in the filename and if the extension is in extensions
#     return '.' in filename and filename.rsplit('.', 1)[1].lower() in extensions
# @app.route("/upload", methods = ["GET", "POST"])
# def upload():
#     if request.method == 'POST':
#         if 'file' not in request.files:
#             print("no file")
#             return redirect(request.url)
#         file = request.files['file'] # name of the input type in the html form
#         if file.filename == '':
#             print("Filname issue")
#             return redirect(request.url)
#         if allowed(file.filename):
#             filename = secure_filename(file.filename) # Avoid malicious filenames
#             file.save(os.path.join(folder, filename))
#             print("Saved")
#             return redirect(request.url)
#     return '''
#         <h1>Upload</h1>
#         <form method=POST enctype=multipart/form-data>
#         <input type=file name=file>
#         <input type=submit value=Upload>
#     '''


# # Admin Panel
# def check(username, password):
#     return username == "admin" and password == "passwordt"
# def auth():
#     return Response('Please login!', 401, {'WWW-Authenticate' : 'Basic real="Login Required"'})
# # Decorator
# from functools import wraps
# def requires_auth(f):
#     @wraps(f)
#     def deco(*args, **kwargs):
#         # args f(1,2,3)
#         # kwargs f(myint = 5, username = "martin")
#         autho = request.authorization
#         if not autho or not check(autho.username, autho.password):
#             return auth()
#         return f(*args, **kwargs)
#     return deco
@app.route("/adminpanel/")
@requires_auth
def adminpanel():
    return "hello admin"


# Receive JSON
# import json
# @app.route("/postme/", methods = ["POST"])
# def postme():
#     # postedjson = request.data.decode("utf-8") # "{'data': 'mydata' " Returns json data as string
#     postedjson = json.loads(request.data.decode("utf-8"))
#     print("Data received: ")
#     print(postedjson["data"])
#     return "Success"


# TLS
# from OpenSSL import SSL
# context = SSL.Context(SSL.TLSv1_2_METHOD)
# context.use_certificate('mycert.crt')
# context.use_privatekey('myprivatekey.key')


# Custom URLs
@app.route("/stock/<string:ticker>")
def stock(ticker):
    return f"{ticker} data"


# Search Box in HTML/Semantic UI/JS
https://www.youtube.com/watch?v=VBr-7poNIMc
<div class="ui search">
    <div class="ui icon input">
        <input class="prompt" type="text" placeholder="search text...">
        <i class="search icon"></i>
    </div>
    <div class="result">
    </div>
</div>
<script>
    var content = [
        {title: 'C'},
        {title: 'C++'},
        {title: 'Java'},
        {title: 'Python'},
    ];
    $('.ui.search').search(
        {
            source: content
        }
    );
</script>


# Add values
@app.route("/add_stock", methods=["POST", "GET"])
def add_stock():
    cookie = request.cookies.get("ticker")
    if cookie is not None:
        return "You selected the stock " + cookie
    ticker = ""
    if request.method == "POST":
        ticker = request.form["ticker"]
    else:
        ticker = request.args.get("ticker") # arguments from the URL
    resp = make_response("You selected " + str(ticker) + "!")
    resp.set_cookie("ticker", ticker)
    return resp


# Old form


<!-- <option value = "Computer Architecture" selected>Computer Architecture</option>
<option value = "Java">Java</option>
<option value = "Discrete Mathematics">Discrete Mathematics</option>
<option value = "C">C</option>
<option value = "Networks">Networks</option>
<option value = "Databases">Databases</option>
<option value = "Machine Learning">Machine Learning</option> -->


<!-- <label>Start date:    </label>
<input type="date" class="ui calendar" id="startdate" name="startdate">
<label>End date:    </label>
<input type="date" class="ui calendar" id="enddate" name="enddate"> -->


// var today = new Date();
        // $('#rangestart').calendar({
        //     type: 'date',
        //     startMode: 'year',
        //     endCalendar: $('#rangeend'),
        //     maxDate: today,
        // });
        // $('#rangeend').calendar({
        //     type: 'date',
        //     startMode: 'year',
        //     startCalendar: $('#rangestart'),
        //     maxDate: today,
        // });

        // $('#startdate').calendar();
        // $('#enddate').calendar();
        // $('.ui.calendar').calendar();

        // var today = new Date();

        // $('#startdate')
        // .calendar({
        //     minDate: new Date(today.getFullYear(), today.getMonth(), today.getDate() - 5),
        //     maxDate: new Date(today.getFullYear(), today.getMonth(), today.getDate() + 5)
        // });

        // $('#enddate')
        // .calendar({
        //     minDate: new Date(today.getFullYear(), today.getMonth(), today.getDate() - 5),
        //     maxDate: new Date(today.getFullYear(), today.getMonth(), today.getDate() + 5)
        // });

    
# Flask Forms

# class CreateModelForm(FlaskForm):
#     startdate = DateField('Start Date',format='%Y-%m-%d', default = date.today() - timedelta(days = 100), validators=(validators.DataRequired(),)) # 
#     enddate = DateField('End Date',format='%Y-%m-%d', default = date.today(), validators=(validators.DataRequired(),))
#     model_tickers = SelectMultipleField('Model tickers',  validators=(validators.DataRequired(),)) 
#     submit = SubmitField('Create Model')

# class PredictionForm(FlaskForm):
#     n_days = IntegerField("Days to predict", default = 1, widget = NumberInput(min = 1, max = 100))
#     ticker_predict = SelectField("Ticker to predict", choices = tickers, default = tickers[0]) # [tickers[0], tickers[3]]) #, choices = tickers_predict, default = tickers_predict_default)
#     submit = SubmitField('Query Model')



# form = CreateModelForm()
# form.model_tickers.choices = tickers
# form.model_tickers.default = tickers[0]
# # form.model_tickers.default = [tickers[0], tickers[3]]
# # form.process()


# if form.validate_on_submit():
#     session['startdate'] = form.startdate.data
#     session['enddate'] = form.enddate.data
#     session['model_tickers'] = form.model_tickers.data
#     return redirect('model')
# return render_template('index.html', tickers = tickers, form=form)

# # Create URLs
# @app.route("/start")
# def start():
#     return '<a href=' + url_for("stock", ticker ="TSLA") + '> TLSA stock page </a>'+

# Test form

@app.route("/form")
def form():
    return  render_template("test_form.html")

# Ways to store data:
Multiprocessing.manager
https://docs.python.org/3/library/multiprocessing.html#managers

Memcached:
https://pypi.org/project/python-memcached/
https://www.memcached.org/
Con: To complex because of own client-server Architecture

Redis:
https://pypi.org/project/redis/
https://docs.redis.com/latest/rs/references/client_references/client_python/
Con: To complex because of own client-server Architecture

Flask application globals:
https://flask.palletsprojects.com/en/1.0.x/api/#flask.g
Con: only valid for the active request, not sure what that means